---
title: "RfDS_1.5"
author: "oooo12"
date: 2023-12-2
format: html
---

```{r setup, include=FALSE}
library(tidyverse)
```

## 1.5 facet 면분할

```{r}
ggplot(data = mpg) +
  geom_point(aes(x = displ, y = hwy)) +
  facet_wrap(~class,nrow = 2)
```

```{r}
ggplot(data = mpg) +
  geom_point(aes(x = displ, y = hwy)) +
  facet_grid(drv~cyl)
```

### 1.5.1 연습문제

#### 1. 연속형 변수로 면분할하면 어떻게 되는가?

```{r}
ggplot(data = mpg) +
  geom_point(aes(x = displ, y = hwy)) +
  facet_wrap(~cty,nrow = 2)
```

::: {.callout-note}
연속형 변수는 1단위로 면분할 한다.
:::

#### 2. facet_grid(drv~cyl)로 만든 플롯에 있는 빈 셀들은 무엇을 의미하는가? 다음의 플롯과 어떻게 연관되는가?

```{r}
ggplot(data = mpg) +
  geom_point(aes(x=drv, y=cyl))
```

```{r}
ggplot(data = mpg) +
  geom_point(aes(x = displ, y = hwy)) +
  facet_grid(drv~cyl)
```

::: {.callout-note}

90도 돌아가 있는 느낌이다.(x,y축이 두 변수가 맞바뀜)

:::


#### 3. 다음의 코드는 어떤 플롯을 만드는가? .은 어떤 역할을 하는가?

```{r}
ggplot(mpg) +
  geom_point(aes(displ,hwy)) +
  facet_grid(drv~.)
```

::: {.callout-note}
drv가 y에 있도록 facet을 하고 싶을 때 .을 사용할 수 있다.
:::

```{r}
ggplot(mpg) +
  geom_point(aes(displ,hwy)) +
  facet_grid(.~cyl)
```


::: {.callout-note}
cyl가 x에 있도록 facet을 하고 싶을 때 .을 사용할 수 있다.
:::


#### 4. 이 절의 면분할된 첫번째 플롯을 살펴보라.

```{r}
ggplot(data = mpg) +
  geom_point(aes(x = displ, y = hwy)) +
  facet_wrap(~class,nrow = 2)
```

색상 심미성을 쓰지 않고 면분할하면 어떤 이점이 있는가? 단점은 무엇인가? 데이터가 더 크다면 이 균형은 어떻게 바뀌겠는가?

::: {.callout-note}
각 명목척도에 해당하는 데이터가 어떤 경향을 갖고 있는지 각각 명확하게 파악할 수 있다. 그러나, 전체적인 데이터 상에서 각 명목척도에 해당하는 데이터가 어디에 위치해있는지에 대해선 명확하지 않다. 또한 데이터가 크다면 면분할을 사용하면 면의 수가 많아지기 때문에 색상 심미성을 사용하는 편이 나을 것으로 예상한다.
:::

#### 5. ?facet_wrap을 읽어라. nrow의 역할은 무엇인가?.... facet_grid()에는 nrow, ncol 인수가 왜 없는가?

::: {.callout-note}
facet_wrap()은 하나의 변수에 대해 면분할 하기 때문에 nrow와 ncol을 이용하여 행, 열의 수를 정해줄 수 있다. 하지만 facet_grid는 2개 변수 조합으로 면분할 하기 때문에 2개 변수의 갯수에 따라 행과 열이 정해진다.
:::

#### 6. facet_grid()를 사용할 때, 대개의 경우 고유 수준이 더 많은 변수를 열로 두어야 한다. 왜인가?

::: {.callout-note}
보통 화면은 가로가 긴 직사각형이기 때문에 가독성을 위해 수준이 많은 변수를 열로 두어야 한다.
:::

