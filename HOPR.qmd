---
title: "HandsOnProgrammingWithR"
author: "동그랑땡"
date: "`r Sys.Date()`"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
die = c(1,2,3,4,5,6)
is.vector(die)
```

```{r}
int = 1L
test = 'ace'
```

```{r}
typeof(die)
```

실수형 = double = 컴퓨터 과학에서 사용하는 용어.

------------------------------------------------------------------------

### 왜 double 인가?

R은 실수형을 저장하기 위해 **64비트(8byte)**의 메모리를 사용한다. 그런데, 애초에는 single precision number로 실수형을 저장했다. single precision number는 32bit(4byte)에 숫자를 저장한다. 컴퓨터는 32bit 저장소가 스탠다드였기 때문에, 저장소 하나를 사용할 수 있는 크기의 single precision number를 먼저 사용했던 것이다.

Double precision number는 single precision number의 2배에 해당하는 저장소가 필요하기 때문에 double 이라는 이름을 갖게 된것이다.

------------------------------------------------------------------------

어떤 숫자는 64개의 1과 0 조합인 64비트로 정확히 표현이 안될 수도 있다.

실수형은 약 16개의 유효숫자를 갖게 된다. 이것이 약간의 오차를 가져온다.

아래는 그러한 오차의 예이다.

```{r}
sqrt(2)^2-2
```

위 코드의 결과값은 0이 나와야 하지만 그렇지 않다.

이러한 오차를 **부동소수점(floting-point)**라고 한다.  
이러한 조건에서 연산하는 것을 부동소수점 연산이라고 한다.

### attribute

attribute(속성)은 metadata라고 생각하면 된다.

속성은 객체와 관련된 정보를 담아두는 장소다.

```{r}
attributes(die)
```

```{r}
names(die) = c('one', 'two', 'three', 'four', 'five', 'six')
attributes(die)
```

```{r}
die
```

```{r}
die+1
```

```{r}
names(die) = NULL
die
```

```{r}
dim(die) = c(2,3)
die
```

```{r}
dim(die) = c(3,2)
die
```

```{r}
dim(die) = c(1,2,3)
die
```

위는 3차원 1 x 2 x 3 하이퍼큐브 hypercube

R은 항상 열방향으로 행렬을 채운다.

```{r}
m = matrix(die,nrow = 2)
m
```

```{r}
m = matrix(die,nrow = 2, byrow = T)
m
```

```{r}
ar = array(c(11:14,21:24,31:34), dim = c(2,2,3))
ar
```

### 연습문제 75p

로열플러시에서 모든 카드의 이름과 그룹을 저장하는 행렬을 만들어보라

[**풀어보기**]{style="color:red"}

```{r}
card = c('ace','king','queen',"jack","ten",rep("spades",5))
dim(card) = c(5,2)
card
```

[**책 풀이**]{style="color:blue"}

```{r}
hand1 = c('ace','king','queen',"jack","ten",rep("spades",5))
matrix(hand1,nrow = 5)
matrix(hand1,ncol = 2)
dim(hand1) = c(5,2)
```

### deck
```{r}
deck <- data.frame(
  face = c("king", "queen", "jack", "ten", "nine", "eight", "seven", "six",
    "five", "four", "three", "two", "ace", "king", "queen", "jack", "ten", 
    "nine", "eight", "seven", "six", "five", "four", "three", "two", "ace", 
    "king", "queen", "jack", "ten", "nine", "eight", "seven", "six", "five", 
    "four", "three", "two", "ace", "king", "queen", "jack", "ten", "nine", 
    "eight", "seven", "six", "five", "four", "three", "two", "ace"),  
  suit = c("spades", "spades", "spades", "spades", "spades", "spades", 
    "spades", "spades", "spades", "spades", "spades", "spades", "spades", 
    "clubs", "clubs", "clubs", "clubs", "clubs", "clubs", "clubs", "clubs", 
    "clubs", "clubs", "clubs", "clubs", "clubs", "diamonds", "diamonds", 
    "diamonds", "diamonds", "diamonds", "diamonds", "diamonds", "diamonds", 
    "diamonds", "diamonds", "diamonds", "diamonds", "diamonds", "hearts", 
    "hearts", "hearts", "hearts", "hearts", "hearts", "hearts", "hearts", 
    "hearts", "hearts", "hearts", "hearts", "hearts"), 
  value = c(13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 13, 12, 11, 10, 9, 8, 
    7, 6, 5, 4, 3, 2, 1, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 13, 12, 11, 
    10, 9, 8, 7, 6, 5, 4, 3, 2, 1)
)
```


### shuffle
```{r}
shuffle <- function(cards) { 
  random <- sample(1:52, size = 52)
  cards[random, ]
}
```

```{r}
deck2 <- deck
```

```{r}
vec <- c(0, 0, 0, 0, 0, 0)
```

```{r}
vec[1] <- 1000

vec
```

```{r}
vec[c(1, 3, 5)] <- c(1, 1, 1)
vec
```

```{r}
vec[4:6] = vec[4:6] + 1
vec
```

```{r}
deck2$new = 1:52
head(deck2)
```

```{r}
deck2$new = NULL # 추가한 열 삭제
head(deck2)
```

```{r}
deck2[c(13,26,39,52),]
```

```{r}
deck2$value[c(13,26,39,52)] = 14
deck2[c(13,26,39,52),]
```


```{r}
head(deck2,13)
```

```{r}
deck3 = shuffle(deck)
head(deck3)
```

### 연습문제 115p

```{r}
deck2$face
```

```{r}
sum(deck2$face == "ace")
```

```{r}
deck3$value[deck3$face == "ace"] = 14
head(deck3)
```

### 하트게임

```{r}
deck4 = deck
```

```{r}
deck4$value = 0
head(deck4)
```

```{r}
deck4$value[deck4$suit == "hearts"] = 1
deck4[deck4$suit == "hearts",]
```

```{r}
deck4[deck4$face == "queen",]
```

```{r}
deck4[deck4$face == "queen" & deck4$suit == "spades",]
```


```{r}
queenOfSpades = deck4$face == "queen" & deck4$suit == "spades"
deck4$value[queenOfSpades] = 13
deck4[queenOfSpades,]
```

```{r}
w = c(-1,0,1)
w > 0
```

```{r}
x = c(5,15)
x > 10 & x<20
```

```{r}
y = "February"
y == "February"
```


```{r}
z = c("Monday","Tuesday","Friday")
all(z %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", 
  "Saturday", "Sunday"))
```

```{r}
deck5 = deck
```

```{r}
facecard = deck5$face %in% c("jack","queen","king")
deck5[facecard,]
```

```{r}
deck5$value[facecard] = 10
head(deck5)
```

```{r}
deck5$value[deck5$face == "ace"] <- NA
head(deck5,13)
```

```{r}
#install.packages("pryr")
#library(pryr)
parenvs(all = T)
```

```{r}
as.environment("package:stats")
```

```{r}
ls(globalenv())
```

```{r}
environment()
```


```{r}
deal = function(){
  deck[1,]
}
```

```{r}
environment(deal)
```

```{r}
deal()
```

```{r}
DECK = deck
```

```{r}
deck = deck[-1,]
```

```{r}
head(deck,3)
```

```{r}
deal = function(){
  card = deck[1,]
  deck = deck[-1,]
  card
}
```

```{r}
deal = function(){
  card = deck[1,]
  assign("deck", deck[-1,], envir = globalenv())
  card
}
```

```{r}
deal()
```

```{r}
shuffle = function(){
  random = sample(1:52, size = 52)
  assign("deck", DECK[random,],envir = globalenv())
}
```

```{r}
shuffle()

deal()
```

```{r}
setup <- function(deck) {
  DECK <- deck

  DEAL <- function() {
    card <- deck[1, ]
    assign("deck", deck[-1, ], envir = globalenv())
    card
  }

  SHUFFLE <- function(){
    random <- sample(1:52, size = 52)
    assign("deck", DECK[random, ], envir = globalenv())
 }

 list(deal = DEAL, shuffle = SHUFFLE)
}

cards <- setup(deck)
```

```{r}
deal = cards$deal
shuffle = cards$shuffle()
```

```{r}
deal
```

```{r}
setup <- function(deck) {
  DECK <- deck

  DEAL <- function() {
    card <- deck[1, ]
    assign("deck", deck[-1, ], envir = parent.env(environment()))
    card
  }

  SHUFFLE <- function(){
    random <- sample(1:52, size = 52)
    assign("deck", DECK[random, ], envir = parent.env(environment()))
 }

 list(deal = DEAL, shuffle = SHUFFLE)
}

cards <- setup(deck)
```

```{r}
deal = cards$deal
shuffle = cards$shuffle
```

```{r}
rm(deck)
```

```{r}
shuffle()
```

```{r}
deal()
```


```{r}
deal()
```

